if ((class(h) != "integer") & (class(h) != "numeric") || length(h) >1|| h<0  || !(h%%1 ==0)) stop("'h' has to be an integer greater than or equal to 0")
#### Calling functions and creating df
WaldCI.df    = ciAWD(n,alp,h)
ArcSineCI.df = ciAAS(n,alp,h)
LRCI.df      = ciALR(n,alp,round(h,0))		#h must be +ve integer
ScoreCI.df   = ciASC(n,alp,h)
WaldLCI.df   = ciALT(n,alp,h)
AdWaldCI.df  = ciATW(n,alp,h)
WaldCI.df$method    = as.factor("Adj-Wald")
ArcSineCI.df$method = as.factor("Adj-ArcSine")
LRCI.df$method      = as.factor("Adj-Likelihood")
WaldLCI.df$method    = as.factor("Adj-Logit-Wald")
ScoreCI.df$method   = as.factor("Adj-Score")
AdWaldCI.df$method  = as.factor("Adj-Wald-T")
Generic.1 = data.frame(method = WaldCI.df$method, x=WaldCI.df$x, LowerLimit = WaldCI.df$LAWD, UpperLimit = WaldCI.df$UAWD, LowerAbb = WaldCI.df$LABB, UpperAbb = WaldCI.df$UABB, ZWI = WaldCI.df$ZWI)
Generic.2 = data.frame(method = ArcSineCI.df$method, x=ArcSineCI.df$x, LowerLimit = ArcSineCI.df$LAAS, UpperLimit = ArcSineCI.df$UAAS, LowerAbb = ArcSineCI.df$LABB, UpperAbb = ArcSineCI.df$UABB, ZWI = ArcSineCI.df$ZWI)
Generic.3 = data.frame(method = LRCI.df$method, x=LRCI.df$x, LowerLimit = LRCI.df$LALR, UpperLimit = LRCI.df$UALR, LowerAbb = LRCI.df$LABB, UpperAbb = LRCI.df$UABB, ZWI = LRCI.df$ZWI)
Generic.4 = data.frame(method = ScoreCI.df$method, x=ScoreCI.df$x, LowerLimit = ScoreCI.df$LASC, UpperLimit = ScoreCI.df$UASC, LowerAbb = ScoreCI.df$LABB, UpperAbb = ScoreCI.df$UABB, ZWI = ScoreCI.df$ZWI)
Generic.5 = data.frame(method = WaldLCI.df$method, x=WaldLCI.df$x, LowerLimit = WaldLCI.df$LALT, UpperLimit = WaldLCI.df$UALT, LowerAbb = WaldLCI.df$LABB, UpperAbb = WaldLCI.df$UABB, ZWI = WaldLCI.df$ZWI)
Generic.6 = data.frame(method = AdWaldCI.df$method, x=AdWaldCI.df$x, LowerLimit = AdWaldCI.df$LATW, UpperLimit = AdWaldCI.df$UATW, LowerAbb = AdWaldCI.df$LABB, UpperAbb = AdWaldCI.df$UABB, ZWI = AdWaldCI.df$ZWI)
Final.df= rbind(Generic.1,Generic.2,Generic.3,Generic.4,Generic.5, Generic.6)
return(Final.df)
}
PlotciAAll(n,alp,h)
#' @examples
#' \dontrun{
#' n=5; alp=0.05; e=0.5 #Mid-p
#' PlotciEX(n,alp,e)
#' n=5; alp=0.05;e=1 #Clopper-Pearson
#' PlotciEX(n,alp,e)
#' n=5; alp=0.05;e=c(0.05,0.1,0.5,0.95,1) #Range including Mid-p and Clopper-Pearson
#' PlotciEX(n,alp,e)
#' }
#' @export
PlotciEX<-function(n,alp,e)
{
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(e)) stop("'e' is missing")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp)>1) stop("'alpha' has to be between 0 and 1")
if ((class(e) != "integer") & (class(e) != "numeric") || any(e>1) || any(e<0)) stop("'e' has to be between 0 and 1")
if (length(e)>10 ) stop("Plot of only 10 intervals of 'e' is possible")
Abberation=ID=Value=UEX=LEX=LABB=UABB=LowerLimit=UpperLimit=ZWI=NULL
ss1=ciEX(n,alp,e)
id=1:nrow(ss1)
ss= data.frame(ID=id,ss1)
ss$e = as.factor(ss$e)
ll=subset(ss, LABB=="YES")
ul=subset(ss, UABB=="YES")
zl=subset(ss, ZWI=="YES")
if (nrow(ll)>0) {
ll=ll[,c(1,3)];
ll$Abberation="Lower";
colnames(ll)<-c("ID","Value","Abberation")}
if (nrow(ul)>0){
ul=ul[,c(1,4)]
ul$Abberation="Upper"
colnames(ul)<-c("ID","Value","Abberation")
}
if (nrow(zl)>0){
zl=zl[,c(1,3)]
zl$Abberation="ZWI"
colnames(zl)<-c("ID","Value","Abberation")
}
ldf= rbind(ll,ul,zl)
if(nrow(ldf)>0){
ggplot2::ggplot(data= ss,ggplot2::aes(x = UEX,y = ID))+
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LEX,
xmax = UEX,
color= e),
size=0.5)+
ggplot2::geom_point(data=ldf,
ggplot2::aes(x=Value, y=ID,
group = Abberation,shape=Abberation),
size = 4, fill = "red") +
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "ID") +
ggplot2::labs(title = "Exact method") +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("brown", "black", "blue", "cyan4", "red",
"orange","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1")) +
ggplot2::scale_shape_manual(values=c(21,22,23))                  # Change shapes
}
else {
ggplot2::ggplot(data= ss,ggplot2::aes(x = UEX,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "ID") +
ggplot2::labs(title = "Exact method") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LEX,
xmax = UEX,
color= e),
size = 0.5) +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1"))
}
}
n=5; alp=0.05; e=0.5 #Mid-p
PlotciEX(n,alp,e)
n=5; alp=0.05;e=1 #Clopper-Pearson
PlotciEX(n,alp,e)
n=5; alp=0.05;e=c(0.05,0.1,0.5,0.95,1) #Range including Mid-p and Clopper-Pearson
PlotciEX(n,alp,e)
ss
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit,
color= e),
size = 0.5)
#' @family  Base methods of CI estimation given x & n
#' @examples
#' x=5; n=5; alp=0.05;e=0.5
#' PlotciEXx(x,n,alp,e) #Mid-p
#' x=5; n=5; alp=0.05;e=1 #Clopper Pearson
#' PlotciEXx(x,n,alp,e)
#' x=5; n=5; alp=0.05;e=c(0.1,0.5,0.95,1) #Range including Mid-p and Clopper-Pearson
#' PlotciEXx(x,n,alp,e)
#' @export
#10. Plot all methods
PlotciEXx<-function(x,n,alp,e)
{
if (missing(x)) stop("'x' is missing")
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(e)) stop("'e' is missing")
if (((class(x) != "integer") & (class(x) != "numeric")) || (x<0) || x>n || length(x)>1) stop("'x' has to be a positive integer between 0 and n")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp)>1) stop("'alpha' has to be between 0 and 1")
if (e>1 || e<0) stop("'e' has to be between 0 and 1")
if (length(e)>10 ) stop("Plot of only 10 interavals of 'e' is possible")
Abberation=ID=method=Value=LowerLimit=UpperLimit=LowerAbb=UpperAbb=ZWI=NULL
ss1=ciEXx(x,n,alp,e)
id=1:nrow(ss1)
ss= data.frame(ID=id,x=x,LowerLimit=ss1$LEXx,UpperLimit=ss1$UEXx,
LowerAbb=ss1$LABB,UpperAbb=ss1$UABB,ZWI=ss1$ZWI,e=ss1$e)
ss$e = as.factor(ss$e)
ll=subset(ss, LowerAbb=="YES")
ul=subset(ss, UpperAbb=="YES")
zl=subset(ss, ZWI=="YES")
if (nrow(ll)>0) {
ll=ll[,c(1,3)];
ll$Abberation="Lower";
colnames(ll)<-c("ID","Value","Abberation")}
if (nrow(ul)>0){
ul=ul[,c(1,4)]
ul$Abberation="Upper"
colnames(ul)<-c("ID","Value","Abberation")
}
if (nrow(zl)>0){
zl=zl[,c(1,3)]
zl$Abberation="ZWI"
colnames(zl)<-c("ID","Value","Abberation")
}
ldf= rbind(ll,ul,zl)
if(nrow(ldf)>0){
oo=
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit,
color= e),
size = 0.5)+
ggplot2::geom_point(data=ldf,
ggplot2::aes(x=Value, y=ID,
group = Abberation,shape=Abberation),
size = 4, fill = "red") +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1")) +
ggplot2::scale_shape_manual(values=c(21,22,23))                  # Change shapes
}
else {
oo=
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit, color= e),
size = 0.5)  +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1"))
}
oo
}
x=5; n=5; alp=0.05;e=0.5
PlotciEXx(x,n,alp,e) #Mid-p
#' @family  Base methods of CI estimation given x & n
#' @examples
#' x=5; n=5; alp=0.05;e=0.5
#' PlotciEXx(x,n,alp,e) #Mid-p
#' x=5; n=5; alp=0.05;e=1 #Clopper Pearson
#' PlotciEXx(x,n,alp,e)
#' x=5; n=5; alp=0.05;e=c(0.1,0.5,0.95,1) #Range including Mid-p and Clopper-Pearson
#' PlotciEXx(x,n,alp,e)
#' @export
#10. Plot all methods
PlotciEXx<-function(x,n,alp,e)
{
if (missing(x)) stop("'x' is missing")
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(e)) stop("'e' is missing")
if (((class(x) != "integer") & (class(x) != "numeric")) || (x<0) || x>n || length(x)>1) stop("'x' has to be a positive integer between 0 and n")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp)>1) stop("'alpha' has to be between 0 and 1")
if (e>1 || e<0) stop("'e' has to be between 0 and 1")
if (length(e)>10 ) stop("Plot of only 10 interavals of 'e' is possible")
Abberation=ID=method=Value=LowerLimit=UpperLimit=LowerAbb=UpperAbb=ZWI=NULL
ss1=ciEXx(x,n,alp,e)
id=1:nrow(ss1)
ss= data.frame(ID=id,x=x,LowerLimit=ss1$LEXx,UpperLimit=ss1$UEXx,
LowerAbb=ss1$LABB,UpperAbb=ss1$UABB,ZWI=ss1$ZWI,e=ss1$e)
ss$e = as.factor(ss$e)
ll=subset(ss, LowerAbb=="YES")
ul=subset(ss, UpperAbb=="YES")
zl=subset(ss, ZWI=="YES")
if (nrow(ll)>0) {
ll=ll[,c(1,3)];
ll$Abberation="Lower";
colnames(ll)<-c("ID","Value","Abberation")}
if (nrow(ul)>0){
ul=ul[,c(1,4)]
ul$Abberation="Upper"
colnames(ul)<-c("ID","Value","Abberation")
}
if (nrow(zl)>0){
zl=zl[,c(1,3)]
zl$Abberation="ZWI"
colnames(zl)<-c("ID","Value","Abberation")
}
ldf= rbind(ll,ul,zl)
if(nrow(ldf)>0){
oo=
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit,
color= e),
size = 0.5)+
ggplot2::geom_point(data=ldf,
ggplot2::aes(x=Value, y=ID,
group = Abberation,shape=Abberation),
size = 4, fill = "red") +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1")) +
ggplot2::scale_shape_manual(values=c(21,22,23))                  # Change shapes
}
else {
oo=
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit, color= e),
size = 0.5)  +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1"))
}
oo
}
#'
#' [6] 2008 Pires, A.M., Amado, C.
#' Interval Estimators for a Binomial Proportion: Comparison of Twenty Methods.
#' REVSTAT - Statistical Journal, 6, 165-197.
#'
#' [7] 2014 Martin Andres, A. and Alvarez Hernandez, M.
#' Two-tailed asymptotic inferences for a proportion.
#' Journal of Applied Statistics, 41, 7, 1516-1529
#' @export
#5.EXACT METHOD
ciEXx=function(x,n,alp,e)
{
if (missing(x)) stop("'x' is missing")
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(e)) stop("'e' is missing")
if (((class(x) != "integer") & (class(x) != "numeric")) || (x<0) || x>n || length(x)>1) stop("'x' has to be a positive integer between 0 and n")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp) >1) stop("'alpha' has to be between 0 and 1")
if ((class(e) != "integer") & (class(e) != "numeric") || any(e>1) || any(e<0)) stop("'e' has to be between 0 and 1")
if (length(e)>10) stop("'e' can have only 10 intervals")
nvar=length(e)
res <- data.frame()
for(i in 1:nvar)
{
lu=lufn103(x,n,alp,e[i])
res <- rbind(res,lu)
}
return(res)
}
#' @family  Base methods of CI estimation given x & n
#' @examples
#' x=5; n=5; alp=0.05;e=0.5
#' PlotciEXx(x,n,alp,e) #Mid-p
#' x=5; n=5; alp=0.05;e=1 #Clopper Pearson
#' PlotciEXx(x,n,alp,e)
#' x=5; n=5; alp=0.05;e=c(0.1,0.5,0.95,1) #Range including Mid-p and Clopper-Pearson
#' PlotciEXx(x,n,alp,e)
#' @export
#10. Plot all methods
PlotciEXx<-function(x,n,alp,e)
{
if (missing(x)) stop("'x' is missing")
if (missing(n)) stop("'n' is missing")
if (missing(alp)) stop("'alpha' is missing")
if (missing(e)) stop("'e' is missing")
if (((class(x) != "integer") & (class(x) != "numeric")) || (x<0) || x>n || length(x)>1) stop("'x' has to be a positive integer between 0 and n")
if ((class(n) != "integer") & (class(n) != "numeric") || length(n) >1|| n<=0 ) stop("'n' has to be greater than 0")
if (alp>1 || alp<0 || length(alp)>1) stop("'alpha' has to be between 0 and 1")
if (e>1 || e<0) stop("'e' has to be between 0 and 1")
if (length(e)>10 ) stop("Plot of only 10 interavals of 'e' is possible")
Abberation=ID=method=Value=LowerLimit=UpperLimit=LowerAbb=UpperAbb=ZWI=NULL
ss1=ciEXx(x,n,alp,e)
id=1:nrow(ss1)
ss= data.frame(ID=id,x=x,LowerLimit=ss1$LEXx,UpperLimit=ss1$UEXx,
LowerAbb=ss1$LABB,UpperAbb=ss1$UABB,ZWI=ss1$ZWI,e=ss1$e)
ss$e = as.factor(ss$e)
ll=subset(ss, LowerAbb=="YES")
ul=subset(ss, UpperAbb=="YES")
zl=subset(ss, ZWI=="YES")
if (nrow(ll)>0) {
ll=ll[,c(1,3)];
ll$Abberation="Lower";
colnames(ll)<-c("ID","Value","Abberation")}
if (nrow(ul)>0){
ul=ul[,c(1,4)]
ul$Abberation="Upper"
colnames(ul)<-c("ID","Value","Abberation")
}
if (nrow(zl)>0){
zl=zl[,c(1,3)]
zl$Abberation="ZWI"
colnames(zl)<-c("ID","Value","Abberation")
}
ldf= rbind(ll,ul,zl)
if(nrow(ldf)>0){
oo=
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit,
color= e),
size = 0.5)+
ggplot2::geom_point(data=ldf,
ggplot2::aes(x=Value, y=ID,
group = Abberation,shape=Abberation),
size = 4, fill = "red") +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1")) +
ggplot2::scale_shape_manual(values=c(21,22,23))                  # Change shapes
}
else {
oo=
ggplot2::ggplot(data= ss,ggplot2::aes(x = UpperLimit,y = ID))+
ggplot2::labs(x = "Lower and Upper limits") +
ggplot2::labs(y = "x values") +
ggplot2::labs(title = "Exact method given x") +
ggplot2::geom_errorbarh(data= ss,
ggplot2::aes(
xmin = LowerLimit,
xmax = UpperLimit, color= e),
size = 0.5)  +
ggplot2::scale_fill_manual(values=c("blue", "cyan4", "red",
"black", "orange","brown","chartreuse4",
"blueviolet" , "deeppink", "darksalmon", "tan1" )) +
ggplot2::scale_colour_manual(values=c("red", "black", "blue", "cyan4", "orange",
"deeppink","chartreuse4",
"blueviolet" , "brown", "darksalmon", "tan1"))
}
oo
}
x=5; n=5; alp=0.05;e=0.5
PlotciEXx(x,n,alp,e) #Mid-p
lufn103<-function(x,n,alp,e)
{
LEXx=0
UEXx=0
LABB=0
UABB=0
ZWI=0
LEXx=exlim103l(x,n,alp,e)
UEXx=exlim103u(x,n,alp,e)
if(LEXx<0) LABB="YES" else LABB="NO"
if(LEXx<0) LEXx=0
if(UEXx>1) UABB="YES" else UABB="NO"
if(UEXx>1) UEXx=1
if(UEXx-LEXx==0) ZWI="YES" else ZWI="NO"
resx=data.frame(x,LEXx,UEXx,LABB, UABB, ZWI, e)
return(resx)
}
exlim103l=function(x,n,alp,e)
{
if(x==0)
{
LEX = 0
} else if(x==n){
LEX= (alp/(2*e))^(1/n)
}else
{
z=x-1
y=0:z
f1=function(p) (1-e)*dbinom(x,n,p)+sum(dbinom(y,n,p))-(1-(alp/2))
LEX= uniroot(f1,c(0,1))$root
}
return(LEX)
}
PlotciEXx(x,n,alp,e) #Mid-p
exlim103l=function(x,n,alp,e)
{
if(x==0)
{
LEX = 0
} else if(x==n){
LEX= (alp/(2*e))^(1/n)
}else
{
z=x-1
y=0:z
f1=function(p) (1-e)*dbinom(x,n,p)+sum(dbinom(y,n,p))-(1-(alp/2))
LEX= uniroot(f1,c(0,1))$root
}
return(LEX)
}
exlim103u=function(x,n,alp,e)
{
if(x==0)
{
UEX = 1-((alp/(2*e))^(1/n))
} else if(x==n){
UEX = 1
}else
{
z=x-1
y=0:z
f2= function(p) e*dbinom(x,n,p)+sum(dbinom(y,n,p))-(alp/2)
UEX =uniroot(f2,c(0,1))$root
}
return(UEX)
}
PlotciEXx(x,n,alp,e) #Mid-p
x=5; n=5; alp=0.05;e=1 #Clopper Pearson
PlotciEXx(x,n,alp,e) #Mid-p
x=5; n=5; alp=0.05;e=c(0.1,0.5,0.95,1) #Range including Mid-p and Clopper-Pearson
PlotciEXx(x,n,alp,e) #Mid-p
PlotciEXx(x,n,alp,e)
library(proportion)
install.packages("qpdf")
library(qpdf)
version
install.packages("roxygen2")
install.packages("TeachingDemos")
install.packages("rmarkdown")
install.packages("qpdf")
install.packages(c("binom", "PropCIs", "BlakerCI", "prevalence"))
install.packages("prevalence")
library(qpdf)
install.packages(c("devtools", "usethis"))
install.packages("prevalence")
install.packages("knitr")
